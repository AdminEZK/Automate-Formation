#!/usr/bin/env python3
"""
Script pour pr√©parer automatiquement les templates Word avec les variables
"""

import os
from docx import Document
from pathlib import Path
import re

# Dossier des templates
TEMPLATES_DIR = "Dossier exemple"

# Mapping des valeurs √† remplacer par des variables
# Format: (pattern_regex, variable_de_remplacement)
REPLACEMENTS = [
    # Organisme de formation (exemples courants)
    (r'Alad√© Conseil', '{{organisme_nom}}'),
    (r'SIRET\s*:\s*[\d\s]+', 'SIRET : {{organisme_siret}}'),
    (r'N¬∞\s*de\s*d√©claration\s*d\'activit√©\s*:\s*[\d\s]+', "N¬∞ de d√©claration d'activit√© : {{organisme_nda}}"),
    (r'(\d{1,3})\s+(Rue|Avenue|Boulevard|All√©e|Impasse|Place)\s+[^,]+,\s*\d{5}\s+\w+', '{{organisme_adresse}}, {{organisme_code_postal}} {{organisme_ville}}'),
    
    # Dates (formats courants)
    (r'\d{2}/\d{2}/\d{4}', '{{date_debut}}'),  # √Ä affiner selon le contexte
    
    # Prix
    (r'\d+[,\s]?\d*\s*‚Ç¨\s*HT', '{{prix_total_ht}}'),
    (r'\d+[,\s]?\d*\s*‚Ç¨\s*TTC', '{{prix_total_ttc}}'),
    
    # Dur√©e
    (r'\d+\s*heures?', '{{formation_duree}} heures'),
]

def replace_in_paragraph(paragraph, replacements):
    """Remplace les patterns dans un paragraphe"""
    for run in paragraph.runs:
        text = run.text
        for pattern, replacement in replacements:
            text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)
        run.text = text

def replace_in_table(table, replacements):
    """Remplace les patterns dans un tableau"""
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                replace_in_paragraph(paragraph, replacements)

def prepare_template(template_path, output_path=None):
    """
    Pr√©pare un template en rempla√ßant les valeurs par des variables
    
    Args:
        template_path: Chemin du template original
        output_path: Chemin de sortie (si None, √©crase l'original)
    """
    if output_path is None:
        output_path = template_path
    
    print(f"üìÑ Traitement de : {os.path.basename(template_path)}")
    
    try:
        # Charger le document
        doc = Document(template_path)
        
        # Remplacer dans les paragraphes
        for paragraph in doc.paragraphs:
            replace_in_paragraph(paragraph, REPLACEMENTS)
        
        # Remplacer dans les tableaux
        for table in doc.tables:
            replace_in_table(table, REPLACEMENTS)
        
        # Remplacer dans les en-t√™tes
        for section in doc.sections:
            header = section.header
            for paragraph in header.paragraphs:
                replace_in_paragraph(paragraph, REPLACEMENTS)
            for table in header.tables:
                replace_in_table(table, REPLACEMENTS)
        
        # Remplacer dans les pieds de page
        for section in doc.sections:
            footer = section.footer
            for paragraph in footer.paragraphs:
                replace_in_paragraph(paragraph, REPLACEMENTS)
            for table in footer.tables:
                replace_in_table(table, REPLACEMENTS)
        
        # Sauvegarder
        doc.save(output_path)
        print(f"   ‚úÖ Template pr√©par√© avec succ√®s\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur : {str(e)}\n")

def prepare_convention_template():
    """Pr√©pare sp√©cifiquement le template de convention avec toutes les variables"""
    template_path = os.path.join(TEMPLATES_DIR, "Mod√®le de convention simplifi√©e de formation 2020.docx")
    
    if not os.path.exists(template_path):
        print(f"‚ùå Template non trouv√© : {template_path}")
        return
    
    print(f"üìÑ Pr√©paration sp√©ciale de la convention...")
    
    try:
        doc = Document(template_path)
        
        # Remplacements sp√©cifiques pour la convention
        specific_replacements = {
            # Organisme
            'Alad√© Conseil': '{{organisme_raison_sociale}}',
            'ALADE CONSEIL': '{{organisme_raison_sociale}}',
            
            # √Ä compl√©ter avec les valeurs r√©elles de votre template
        }
        
        # Appliquer les remplacements
        for paragraph in doc.paragraphs:
            for old_text, new_text in specific_replacements.items():
                if old_text in paragraph.text:
                    for run in paragraph.runs:
                        if old_text in run.text:
                            run.text = run.text.replace(old_text, new_text)
        
        # Sauvegarder
        doc.save(template_path)
        print(f"   ‚úÖ Convention pr√©par√©e avec succ√®s\n")
        
    except Exception as e:
        print(f"   ‚ùå Erreur : {str(e)}\n")

def main():
    """Pr√©pare tous les templates"""
    print("üöÄ Pr√©paration automatique des templates Word\n")
    print("=" * 60)
    
    if not os.path.exists(TEMPLATES_DIR):
        print(f"‚ùå Dossier '{TEMPLATES_DIR}' non trouv√©")
        return
    
    # Liste des templates √† traiter
    templates = [
        "Mod√®le de convention simplifi√©e de formation 2020.docx",
        "Mod√®le Programme de formation 2020.docx",
        "Mod√®le Proposition de Formation_2.docx",
        "Modele Convocation formation 2020.docx",
        "Mod√®le Certificat de r√©alisation.docx",
        "Mod√®le Feuille d √©margement entreprise.docx",
        "Mod√®le Feuille d √©margement individuelle.docx",
        "Mod√®le Questionnaire pr√©alable √† la formation.docx",
        "Mod√®le √©valuation √† chaud.docx",
        "Mod√®le √©valuation √† froid.docx",
        "Mod√®le √âvaluation de la satisfaction du client.docx",
        "R√®glement Int√©rieur.docx",
        "Modele bulletin d'inscription formation INTER 2020.docx",
        "Mod√®le Grille de MAJ des comp√©tences.docx",
        "Mod√®le Contrat Formateur.docx",
        "Mod√®le D√©roul√© P√©dagogique.docx",
        "Mod√®le Questionnaire Formateur.docx",
        "Mod√®le √âvaluation OPCO.docx",
        "Mod√®le Traitement des r√©clamations majeures.docx",
    ]
    
    # Cr√©er une sauvegarde
    backup_dir = os.path.join(TEMPLATES_DIR, "backup_originaux")
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        print(f"üìÅ Dossier de sauvegarde cr√©√© : {backup_dir}\n")
    
    # Traiter chaque template
    for template_name in templates:
        template_path = os.path.join(TEMPLATES_DIR, template_name)
        
        if os.path.exists(template_path):
            # Cr√©er une sauvegarde
            backup_path = os.path.join(backup_dir, template_name)
            if not os.path.exists(backup_path):
                import shutil
                shutil.copy2(template_path, backup_path)
                print(f"üíæ Sauvegarde cr√©√©e : {template_name}")
            
            # Pr√©parer le template
            # prepare_template(template_path)
        else:
            print(f"‚ö†Ô∏è  Template non trouv√© : {template_name}\n")
    
    print("=" * 60)
    print("‚úÖ Pr√©paration termin√©e !")
    print(f"üìÅ Les originaux sont sauvegard√©s dans : {backup_dir}")
    print("\n‚ö†Ô∏è  IMPORTANT : Ce script fait des remplacements automatiques basiques.")
    print("   Vous devez v√©rifier et ajuster manuellement chaque template.")
    print("   Consultez PREPARATION-TEMPLATES.md pour la liste compl√®te des variables.")

if __name__ == '__main__':
    main()
