/**
 * Script de d√©marrage robuste pour Render
 */

// Charger les variables d'environnement
require('dotenv').config();

// V√©rifier les variables d'environnement critiques
const requiredEnvVars = [
  'SUPABASE_URL',
  'PORT'
];

// V√©rifier qu'au moins une cl√© Supabase est pr√©sente
const hasSupabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 
                       process.env.SUPABASE_KEY || 
                       process.env.SUPABASE_ANON_KEY;

console.log('üîç V√©rification des variables d\'environnement...');
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå Variables d\'environnement manquantes:', missingVars.join(', '));
  process.exit(1);
}

if (!hasSupabaseKey) {
  console.error('‚ùå Aucune cl√© Supabase trouv√©e (SUPABASE_SERVICE_ROLE_KEY, SUPABASE_KEY ou SUPABASE_ANON_KEY)');
  process.exit(1);
}

console.log('‚úÖ Toutes les variables critiques sont pr√©sentes');
console.log(`   PORT: ${process.env.PORT}`);
console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'development'}`);
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL ? '‚úì' : '‚úó'}`);

// D√©marrer l'application
console.log('\nüöÄ D√©marrage de l\'application...\n');

try {
  require('./index.js');
} catch (error) {
  console.error('‚ùå Erreur fatale au d√©marrage:', error);
  console.error(error.stack);
  process.exit(1);
}
