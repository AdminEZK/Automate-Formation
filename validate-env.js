#!/usr/bin/env node
// Script de validation du fichier .env
require('dotenv').config();

console.log('üîç Validation de la configuration .env\n');
console.log('='.repeat(60));

const requiredVars = [
  { name: 'SUPABASE_URL', description: 'URL Supabase' },
  { name: 'SUPABASE_ANON_KEY', description: 'Cl√© anonyme Supabase' },
  { name: 'SUPABASE_SERVICE_ROLE_KEY', description: 'Cl√© service role Supabase' },
  { name: 'RESEND_API_KEY', description: 'Cl√© API Resend' }
];

const optionalVars = [
  { name: 'PORT', description: 'Port du serveur', default: '3001' },
  { name: 'NODE_ENV', description: 'Environnement', default: 'development' },
  { name: 'EMAIL_FROM', description: 'Email exp√©diteur', default: 'onboarding@resend.dev' },
  { name: 'EMAIL_FROM_NAME', description: 'Nom exp√©diteur', default: 'Alad√© Conseil' },
  { name: 'FRONTEND_URL', description: 'URL frontend (CORS)', default: 'http://localhost:3000' },
  { name: 'ORGANISME_ID', description: 'ID organisme', default: 'N/A' }
];

let hasErrors = false;
let hasWarnings = false;

// V√©rification des variables requises
console.log('\nüìã Variables REQUISES:\n');
requiredVars.forEach(({ name, description }) => {
  const value = process.env[name];
  if (!value || value === '' || value.includes('votre_') || value.includes('xxx')) {
    console.log(`‚ùå ${name.padEnd(30)} - ${description}`);
    console.log(`   ‚ö†Ô∏è  MANQUANTE ou valeur par d√©faut d√©tect√©e`);
    hasErrors = true;
  } else {
    const maskedValue = value.substring(0, 10) + '...' + value.substring(value.length - 4);
    console.log(`‚úÖ ${name.padEnd(30)} - ${description}`);
    console.log(`   ${maskedValue}`);
  }
});

// V√©rification des variables optionnelles
console.log('\nüìã Variables OPTIONNELLES:\n');
optionalVars.forEach(({ name, description, default: defaultValue }) => {
  const value = process.env[name];
  if (!value || value === '') {
    console.log(`‚ö†Ô∏è  ${name.padEnd(30)} - ${description}`);
    console.log(`   Valeur par d√©faut: ${defaultValue}`);
    hasWarnings = true;
  } else if (value.includes('votre_') || value.includes('xxx')) {
    console.log(`‚ö†Ô∏è  ${name.padEnd(30)} - ${description}`);
    console.log(`   ‚ö†Ô∏è  Valeur par d√©faut d√©tect√©e: ${value}`);
    hasWarnings = true;
  } else {
    console.log(`‚úÖ ${name.padEnd(30)} - ${description}`);
    console.log(`   ${value}`);
  }
});

// Validation sp√©cifique
console.log('\nüîç Validations sp√©cifiques:\n');

// V√©rifier format RESEND_API_KEY
if (process.env.RESEND_API_KEY && !process.env.RESEND_API_KEY.startsWith('re_')) {
  console.log('‚ùå RESEND_API_KEY doit commencer par "re_"');
  hasErrors = true;
} else if (process.env.RESEND_API_KEY) {
  console.log('‚úÖ Format RESEND_API_KEY valide');
}

// V√©rifier format SUPABASE_URL
if (process.env.SUPABASE_URL && !process.env.SUPABASE_URL.startsWith('http')) {
  console.log('‚ùå SUPABASE_URL doit commencer par "http://" ou "https://"');
  hasErrors = true;
} else if (process.env.SUPABASE_URL) {
  console.log('‚úÖ Format SUPABASE_URL valide');
}

// V√©rifier format EMAIL_FROM
if (process.env.EMAIL_FROM && !process.env.EMAIL_FROM.includes('@')) {
  console.log('‚ùå EMAIL_FROM doit √™tre une adresse email valide');
  hasErrors = true;
} else if (process.env.EMAIL_FROM) {
  console.log('‚úÖ Format EMAIL_FROM valide');
}

// R√©sum√©
console.log('\n' + '='.repeat(60));
console.log('\nüìä R√âSUM√â:\n');

if (hasErrors) {
  console.log('‚ùå Configuration INVALIDE - Des variables requises sont manquantes');
  console.log('\nüí° Actions √† faire:');
  console.log('   1. Copier .env.production.example vers .env');
  console.log('   2. Remplacer les valeurs par d√©faut par vos vraies cl√©s');
  console.log('   3. Relancer ce script pour valider\n');
  process.exit(1);
} else if (hasWarnings) {
  console.log('‚ö†Ô∏è  Configuration PARTIELLE - Variables requises OK, mais certaines optionnelles manquent');
  console.log('   Le syst√®me fonctionnera avec des valeurs par d√©faut\n');
  process.exit(0);
} else {
  console.log('‚úÖ Configuration COMPL√àTE - Tous les param√®tres sont configur√©s!\n');
  console.log('üöÄ Vous pouvez maintenant:');
  console.log('   1. Tester l\'envoi d\'email: node examples/testResend.js');
  console.log('   2. D√©marrer le serveur: npm start');
  console.log('   3. D√©marrer le dashboard: cd dashboard-client && npm run dev\n');
  process.exit(0);
}
